---
- name: Terraform Cloud Run Module Test
  hosts: localhost
  gather_facts: false
  vars:
    tfc_token: "{{ lookup('env', 'TF_TOKEN') }}"
    organization: "Ansible-BU-TFC"
    workspace_name: "run_module_test"

  tasks:
    - name: Verify required variables are set
      ansible.builtin.assert:
        that:
          - tfc_token != ""
          - organization != ""
          - workspace_name != ""
        fail_msg: |
          Please set the following environment variables:
          - tf_token: Your Terraform Cloud API token
          - TFC_ORGANIZATION: Your Terraform Cloud organization name
          - TFC_WORKSPACE: An existing workspace name to test with
        success_msg: "All required variables are configured"

    - name: Test 1 - Create a plan-only run
      hashicorp.terraform.run:
        organization: "{{ organization }}"
        workspace: "{{ workspace_name }}"
        run_message: "Simple test - plan only"
        plan_only: true
        tf_token: "{{ tfc_token }}"
        poll: false  # Don't wait for completion in simple test
      register: plan_result

    - name: Display plan run result
      ansible.builtin.debug:
        var: plan_result

    - name: Test 2 - Create a run using workspace_id (if you have one)
      hashicorp.terraform.run:
        workspace_id: "{{ workspace_id | default(omit) }}"
        run_message: "Simple test - using workspace ID"
        plan_only: true
        tf_token: "{{ tfc_token }}"
        poll: false
      register: workspace_id_result
      when: workspace_id is defined

    - name: Display workspace ID run result
      ansible.builtin.debug:
        var: workspace_id_result
      when: workspace_id is defined

    - name: Test 3 - Test run status without polling
      hashicorp.terraform.run:
        organization: "{{ organization }}"
        workspace: "{{ workspace_name }}"
        run_message: "Simple test - no polling"
        plan_only: true
        tf_token: "{{ tfc_token }}"
        poll: false
      register: no_poll_result

    - name: Display no-poll run result
      ansible.builtin.debug:
        var: no_poll_result

    - name: Test 4 - Create a save plan for discard test
      hashicorp.terraform.run:
        organization: "{{ organization }}"
        workspace: "{{ workspace_name }}"
        run_message: "Simple test - save plan for discard"
        is_destroy: true
        save_plan: true
        tf_token: "{{ tfc_token }}"
        poll: false
      register: save_plan_for_discard_result

    - name: Display save plan for discard result
      ansible.builtin.debug:
        var: save_plan_for_discard_result

    - name: Test 5 - Discard the saved plan
      hashicorp.terraform.run:
        run_id: "{{ save_plan_for_discard_result.id }}"
        state: canceled
        tf_token: "{{ tfc_token }}"
        poll: false
      register: discard_result
      # when: save_plan_for_discard_result is changed

    - name: Display discard result
      ansible.builtin.debug:
        var: discard_result
      when: discard_result is defined


    - name: Test 6 - Check mode for creating a new run (state=present)
      hashicorp.terraform.run:
        organization: "{{ organization }}"
        workspace: "{{ workspace_name }}"
        run_message: "Check mode test - create run"
        plan_only: true
        tf_token: "{{ tfc_token }}"
        poll: false
      check_mode: true
      register: check_mode_present_result

    - name: Display check mode present result
      ansible.builtin.debug:
        var: check_mode_present_result

    - name: Verify check mode present result
      ansible.builtin.assert:
        that:
          - check_mode_present_result is changed
          - check_mode_present_result.msg == "Check mode is enabled, no changes will be made"
          - check_mode_present_result.failed is false
        fail_msg: "Check mode for state=present failed validation"
        success_msg: "Check mode for state=present works correctly"

    - name: Test 7 - Check mode for applying an existing run (state=applied)
      hashicorp.terraform.run:
        run_id: "{{ plan_result.id }}"
        state: applied
        tf_token: "{{ tfc_token }}"
        poll: false
      check_mode: true
      register: check_mode_applied_result

    - name: Display check mode applied result
      ansible.builtin.debug:
        var: check_mode_applied_result

    - name: Verify check mode applied result
      ansible.builtin.assert:
        that:
          - check_mode_applied_result is changed
          - '"check mode is enabled, no changes will be made" in check_mode_applied_result.msg'
          - '"found" in check_mode_applied_result.msg'
          - check_mode_applied_result.failed is false
        fail_msg: "Check mode for state=applied failed validation"
        success_msg: "Check mode for state=applied works correctly"

    - name: Test 8 - Check mode for discarding a run (state=discarded)
      hashicorp.terraform.run:
        run_id: "{{ plan_result.id }}"
        state: discarded
        tf_token: "{{ tfc_token }}"
        poll: false
      check_mode: true
      register: check_mode_discarded_result

    - name: Display check mode discarded result
      ansible.builtin.debug:
        var: check_mode_discarded_result

    - name: Verify check mode discarded result
      ansible.builtin.assert:
        that:
          - check_mode_discarded_result is changed
          - '"check mode is enabled, no changes will be made" in check_mode_discarded_result.msg'
          - check_mode_discarded_result.failed is false
        fail_msg: "Check mode for state=discarded failed validation"
        success_msg: "Check mode for state=discarded works correctly"

    - name: Test 9 - Check mode for canceling a run (state=canceled)
      hashicorp.terraform.run:
        run_id: "{{ plan_result.id }}"
        state: canceled
        tf_token: "{{ tfc_token }}"
        poll: false
      check_mode: true
      register: check_mode_canceled_result

    - name: Display check mode canceled result
      ansible.builtin.debug:
        var: check_mode_canceled_result

    - name: Verify check mode canceled result
      ansible.builtin.assert:
        that:
          - check_mode_canceled_result is changed
          - '"check mode is enabled, no changes will be made" in check_mode_canceled_result.msg'
          - check_mode_canceled_result.failed is false
        fail_msg: "Check mode for state=canceled failed validation"
        success_msg: "Check mode for state=canceled works correctly"

    - name: Test 10 - Check mode with non-existent run ID
      hashicorp.terraform.run:
        run_id: "run-NonExistentRunID123"
        state: applied
        tf_token: "{{ tfc_token }}"
        poll: false
      check_mode: true
      register: check_mode_nonexistent_result

    - name: Display check mode non-existent result
      ansible.builtin.debug:
        var: check_mode_nonexistent_result

    - name: Verify check mode non-existent result
      ansible.builtin.assert:
        that:
          - check_mode_nonexistent_result is not changed
          - '"not found" in check_mode_nonexistent_result.msg'
          - check_mode_nonexistent_result.failed is false
        fail_msg: "Check mode for non-existent run failed validation"
        success_msg: "Check mode for non-existent run works correctly"

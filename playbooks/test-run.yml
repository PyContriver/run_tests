---
- name: Terraform Cloud Run Module Test
  hosts: localhost
  gather_facts: false
  vars:
    tfc_token: "{{ lookup('env', 'TF_TOKEN') }}"
    organization: "Ansible-BU-TFC"
    workspace_name: "run_module_test"

  tasks:
    - name: Verify required variables are set
      ansible.builtin.assert:
        that:
          - tfc_token != ""
          - organization != ""
          - workspace_name != ""
        fail_msg: |
          Please set the following environment variables:
          - tf_token: Your Terraform Cloud API token
          - TFC_ORGANIZATION: Your Terraform Cloud organization name
          - TFC_WORKSPACE: An existing workspace name to test with
        success_msg: "All required variables are configured"

    - name: Test 1 - Create a plan-only run
      hashicorp.terraform.run:
        organization: "{{ organization }}"
        workspace: "{{ workspace_name }}"
        run_message: "Simple test - plan only"
        plan_only: true
        tf_token: "{{ tfc_token }}"
        poll: true
        poll_timeout: 300
        poll_interval: 10
      register: plan_result

    - name: Assert that the plan run was changed
      ansible.builtin.assert:
        that:
          - plan_result is changed

    - name: Test 3 - Test run status without polling
      hashicorp.terraform.run:
        organization: "{{ organization }}"
        workspace: "{{ workspace_name }}"
        run_message: "Simple test - no polling"
        plan_only: true
        tf_token: "{{ tfc_token }}"
        poll: false
      register: no_poll_result

    - name: Assert that the no poll run was changed
      ansible.builtin.assert:
        that:
          - no_poll_result is changed

    - name: Wait before next test
      ansible.builtin.pause:
        seconds: 60

    - name: Test 4 - Create a save plan for apply test
      hashicorp.terraform.run:
        organization: "{{ organization }}"
        workspace: "{{ workspace_name }}"
        run_message: "Simple test - save plan for discard"
        save_plan: true
        tf_token: "{{ tfc_token }}"
        poll: true
        poll_timeout: 300
        poll_interval: 10
      register: save_plan_for_discard_result

    - name: Assert that the save plan for discard run was changed
      ansible.builtin.assert:
        that:
          - save_plan_for_discard_result is changed

    - name: Test 5 - Apply the saved plan
      hashicorp.terraform.run:
        run_id: "{{ save_plan_for_discard_result.id }}"
        state: applied
        tf_token: "{{ tfc_token }}"
        poll: false
      register: apply_result

    - name: Assert that the apply run was changed
      ansible.builtin.assert:
        that:
          - apply_result is changed

    - name: Test 5a - Idempotent check - Apply the same run again
      hashicorp.terraform.run:
        run_id: "{{ save_plan_for_discard_result.id }}"
        state: applied
        tf_token: "{{ tfc_token }}"
        poll: false
      register: idempotent_apply_result

    - name: Assert that the idempotent apply run was not changed
      ansible.builtin.assert:
        that:
          - idempotent_apply_result is not changed

    - name: Wait before next test
      ansible.builtin.pause:
        seconds: 60

    - name: Test 6 - Check mode for creating a new run (state=present)
      hashicorp.terraform.run:
        organization: "{{ organization }}"
        workspace: "{{ workspace_name }}"
        run_message: "Check mode test - create run"
        plan_only: true
        tf_token: "{{ tfc_token }}"
        poll: false
      check_mode: true
      register: check_mode_present_result

    - name: Test 7 - Check mode for applying an invalid run (state=applied)
      hashicorp.terraform.run:
        run_id: "run-12345"
        state: applied
        tf_token: "{{ tfc_token }}"
        poll: false
      check_mode: true
      ignore_errors: true
      register: check_mode_applied_result

    - name: Test 8 - auto_apply and is_destroy
      hashicorp.terraform.run:
        organization: "{{ organization }}"
        workspace: "{{ workspace_name }}"
        run_message: "Auto apply test"
        auto_apply: true
        is_destroy: true
        tf_token: "{{ tfc_token }}"
        poll: true
        poll_timeout: 300
        poll_interval: 10
      register: auto_apply_result

    - name: Assert that the auto apply run was changed
      ansible.builtin.assert:
        that:
          - auto_apply_result is changed

    - name: invalid run canceled in check mode
      hashicorp.terraform.run:
        run_id: "run-12345"
        state: canceled
        tf_token: "{{ tfc_token }}"
        poll: false
      check_mode: true
      ignore_errors: true
      register: invalid_run_canceled_result

    - name: Assert that the invalid run canceled run failed
      ansible.builtin.assert:
        that:
          - invalid_run_canceled_result.failed is true
          - invalid_run_canceled_result.msg == "Run run-1234abcd not found in the Terraform Cloud/Enterprise workspace"

    - name: invalid run applied in check mode
      hashicorp.terraform.run:
        run_id: "run-12345"
        state: applied
        tf_token: "{{ tfc_token }}"
        poll: false
      check_mode: true
      ignore_errors: true
      register: invalid_run_canceled_result

    - name: Assert that the invalid run canceled run failed
      ansible.builtin.assert:
        that:
          - invalid_run_applied_result.failed is true
          - invalid_run_applied_result.msg == "Run run-12345 not found in the Terraform Cloud/Enterprise workspace"

    - name: invalid run discarded in check mode
      hashicorp.terraform.run:
        run_id: "run-12345"
        state: discarded
        tf_token: "{{ tfc_token }}"
        poll: false
      check_mode: true
      ignore_errors: true
      register: invalid_run_discarded_result

    - name: Assert that the invalid run canceled run failed
      ansible.builtin.assert:
        that:
          - invalid_run_discarded_result.failed is true
          - invalid_run_discarded_result.msg == "Run run-12345 not found in the Terraform Cloud/Enterprise workspace"
